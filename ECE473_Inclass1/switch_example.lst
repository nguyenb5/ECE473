
switch_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000cb6  00000d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800100  00800100  00000d4a  2**0
                  ALLOC
  3 .stab         00001ff8  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011e3  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00004e26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_15>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 33       	cpi	r26, 0x3D	; 61
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 74 05 	call	0xae8	; 0xae8 <main>
  ac:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <spi_init>:
//******************************************************************************
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does no further device specific inits
//******************************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, no interrupts 
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  ba:	80 e5       	ldi	r24, 0x50	; 80
  bc:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x FCPU 
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	8e b9       	out	0x0e, r24	; 14
  c2:	08 95       	ret

000000c4 <__vector_15>:
//Runs once at each TCNT0 interrupt and notes the polarity of the pushbutton
//switch. When pressed, the pushbutton state is '0'.

//******************************************************************************

ISR(TIMER0_COMP_vect){ 
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	0f 93       	push	r16
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
#ifdef DEBOUNCE 
  //simple, but effective 12-cycle debouncer
  static uint64_t state = 0;     //"state" holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  e2:	e0 b3       	in	r30, 0x10	; 16
  e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <state.2090>
  e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <state.2090+0x1>
  ec:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <state.2090+0x2>
  f0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <state.2090+0x3>
  f4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <state.2090+0x4>
  f8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <state.2090+0x5>
  fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state.2090+0x6>
 100:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state.2090+0x7>
 104:	01 e0       	ldi	r16, 0x01	; 1
 106:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__ashldi3>
 10a:	30 6e       	ori	r19, 0xE0	; 224
 10c:	e1 70       	andi	r30, 0x01	; 1
 10e:	2e 2b       	or	r18, r30
 110:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <state.2090>
 114:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <state.2090+0x1>
 118:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <state.2090+0x2>
 11c:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <state.2090+0x3>
 120:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <state.2090+0x4>
 124:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <state.2090+0x5>
 128:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state.2090+0x6>
 12c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <state.2090+0x7>
  if (state == 0xF000) {switch_count++;}  //increment if pushed for 12 cycles 
 130:	21 15       	cp	r18, r1
 132:	30 4f       	sbci	r19, 0xF0	; 240
 134:	41 05       	cpc	r20, r1
 136:	51 05       	cpc	r21, r1
 138:	61 05       	cpc	r22, r1
 13a:	71 05       	cpc	r23, r1
 13c:	81 05       	cpc	r24, r1
 13e:	91 05       	cpc	r25, r1
 140:	49 f4       	brne	.+18     	; 0x154 <__vector_15+0x90>
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
      } 
      break;
    default: break;
  } //switch                  
#endif
} //ISR
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 91       	pop	r16
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	81 11       	cpse	r24, r1
 176:	01 c0       	rjmp	.+2      	; 0x17a <send_lcd+0x8>
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 17c:	77 9b       	sbis	0x0e, 7	; 14
 17e:	fe cf       	rjmp	.-4      	; 0x17c <send_lcd+0xa>
  SPDR = byte;                        //send payload
 180:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 182:	77 9b       	sbis	0x0e, 7	; 14
 184:	fe cf       	rjmp	.-4      	; 0x182 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 186:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 19a:	08 95       	ret

0000019c <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
 19c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <i.2094>
 1a0:	82 0f       	add	r24, r18
 1a2:	91 1d       	adc	r25, r1
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	81 11       	cpse	r24, r1
 1aa:	1f c0       	rjmp	.+62     	; 0x1ea <refresh_lcd+0x4e>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1be:	77 9b       	sbis	0x0e, 7	; 14
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 1c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
 1d6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i.2094>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
 1e0:	80 31       	cpi	r24, 0x10	; 16
 1e2:	49 f1       	breq	.+82     	; 0x236 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
 1e4:	80 32       	cpi	r24, 0x20	; 32
 1e6:	69 f0       	breq	.+26     	; 0x202 <refresh_lcd+0x66>
 1e8:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
 1ea:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <null_flag.2095>
 1ee:	91 11       	cpse	r25, r1
 1f0:	e0 cf       	rjmp	.-64     	; 0x1b2 <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1f6:	77 9b       	sbis	0x0e, 7	; 14
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
 1fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1fc:	77 9b       	sbis	0x0e, 7	; 14
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <refresh_lcd+0x60>
 200:	e0 cf       	rjmp	.-64     	; 0x1c2 <refresh_lcd+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	85 ed       	ldi	r24, 0xD5	; 213
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <refresh_lcd+0x68>
 208:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 20a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 20c:	77 9b       	sbis	0x0e, 7	; 14
 20e:	fe cf       	rjmp	.-4      	; 0x20c <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 214:	77 9b       	sbis	0x0e, 7	; 14
 216:	fe cf       	rjmp	.-4      	; 0x214 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 218:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 222:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 226:	87 7f       	andi	r24, 0xF7	; 247
 228:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
 22c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <null_flag.2095>
      i=0;
 230:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <i.2094>
 234:	08 95       	ret
 236:	f5 ed       	ldi	r31, 0xD5	; 213
 238:	fa 95       	dec	r31
 23a:	f1 f7       	brne	.-4      	; 0x238 <refresh_lcd+0x9c>
 23c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 23e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
 244:	80 ec       	ldi	r24, 0xC0	; 192
 246:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 248:	77 9b       	sbis	0x0e, 7	; 14
 24a:	fe cf       	rjmp	.-4      	; 0x248 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 24c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 256:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 25a:	87 7f       	andi	r24, 0xF7	; 247
 25c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 260:	08 95       	ret

00000262 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 262:	66 0f       	add	r22, r22
 264:	66 0f       	add	r22, r22
 266:	66 0f       	add	r22, r22
 268:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 26a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 270:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 272:	77 9b       	sbis	0x0e, 7	; 14
 274:	fe cf       	rjmp	.-4      	; 0x272 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 276:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 27a:	28 60       	ori	r18, 0x08	; 8
 27c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 280:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 284:	27 7f       	andi	r18, 0xF7	; 247
 286:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 28a:	25 ed       	ldi	r18, 0xD5	; 213
 28c:	2a 95       	dec	r18
 28e:	f1 f7       	brne	.-4      	; 0x28c <set_custom_character+0x2a>
 290:	00 00       	nop
 292:	fc 01       	movw	r30, r24
 294:	9c 01       	movw	r18, r24
 296:	28 5f       	subi	r18, 0xF8	; 248
 298:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 29a:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 29c:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 29e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2a0:	77 9b       	sbis	0x0e, 7	; 14
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
 2a4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2a6:	77 9b       	sbis	0x0e, 7	; 14
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2b8:	87 7f       	andi	r24, 0xF7	; 247
 2ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2be:	85 ed       	ldi	r24, 0xD5	; 213
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <set_custom_character+0x5e>
 2c4:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 2c6:	e2 17       	cp	r30, r18
 2c8:	f3 07       	cpc	r31, r19
 2ca:	41 f7       	brne	.-48     	; 0x29c <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 2cc:	08 95       	ret

000002ce <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	89 9f       	mul	r24, r25
 2d2:	60 0d       	add	r22, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2d8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2da:	77 9b       	sbis	0x0e, 7	; 14
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <set_cursor+0xc>
  SPDR = byte;                        //send payload
 2de:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2e0:	77 9b       	sbis	0x0e, 7	; 14
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2f2:	87 7f       	andi	r24, 0xF7	; 247
 2f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2f8:	08 95       	ret

000002fa <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 2fa:	81 11       	cpse	r24, r1
 2fc:	13 c0       	rjmp	.+38     	; 0x324 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 302:	77 9b       	sbis	0x0e, 7	; 14
 304:	fe cf       	rjmp	.-4      	; 0x302 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 30a:	77 9b       	sbis	0x0e, 7	; 14
 30c:	fe cf       	rjmp	.-4      	; 0x30a <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 30e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 312:	88 60       	ori	r24, 0x08	; 8
 314:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 318:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 322:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 324:	84 36       	cpi	r24, 0x64	; 100
 326:	b0 f4       	brcc	.+44     	; 0x354 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 328:	8a 30       	cpi	r24, 0x0A	; 10
 32a:	60 f5       	brcc	.+88     	; 0x384 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 330:	77 9b       	sbis	0x0e, 7	; 14
 332:	fe cf       	rjmp	.-4      	; 0x330 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 334:	9d ec       	ldi	r25, 0xCD	; 205
 336:	89 9f       	mul	r24, r25
 338:	91 2d       	mov	r25, r1
 33a:	11 24       	eor	r1, r1
 33c:	96 95       	lsr	r25
 33e:	96 95       	lsr	r25
 340:	96 95       	lsr	r25
 342:	2a e0       	ldi	r18, 0x0A	; 10
 344:	92 9f       	mul	r25, r18
 346:	80 19       	sub	r24, r0
 348:	11 24       	eor	r1, r1
 34a:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 34c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 34e:	77 9b       	sbis	0x0e, 7	; 14
 350:	fe cf       	rjmp	.-4      	; 0x34e <uint2lcd+0x54>
 352:	dd cf       	rjmp	.-70     	; 0x30e <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 354:	99 e2       	ldi	r25, 0x29	; 41
 356:	89 9f       	mul	r24, r25
 358:	91 2d       	mov	r25, r1
 35a:	11 24       	eor	r1, r1
 35c:	92 95       	swap	r25
 35e:	9f 70       	andi	r25, 0x0F	; 15
 360:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 366:	77 9b       	sbis	0x0e, 7	; 14
 368:	fe cf       	rjmp	.-4      	; 0x366 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
 36a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 36c:	77 9b       	sbis	0x0e, 7	; 14
 36e:	fe cf       	rjmp	.-4      	; 0x36c <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 370:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 374:	98 60       	ori	r25, 0x08	; 8
 376:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 37a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 37e:	97 7f       	andi	r25, 0xF7	; 247
 380:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 384:	99 e2       	ldi	r25, 0x29	; 41
 386:	89 9f       	mul	r24, r25
 388:	91 2d       	mov	r25, r1
 38a:	11 24       	eor	r1, r1
 38c:	92 95       	swap	r25
 38e:	9f 70       	andi	r25, 0x0F	; 15
 390:	38 2f       	mov	r19, r24
 392:	24 e6       	ldi	r18, 0x64	; 100
 394:	92 9f       	mul	r25, r18
 396:	30 19       	sub	r19, r0
 398:	11 24       	eor	r1, r1
 39a:	2d ec       	ldi	r18, 0xCD	; 205
 39c:	32 9f       	mul	r19, r18
 39e:	91 2d       	mov	r25, r1
 3a0:	11 24       	eor	r1, r1
 3a2:	96 95       	lsr	r25
 3a4:	96 95       	lsr	r25
 3a6:	96 95       	lsr	r25
 3a8:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ae:	77 9b       	sbis	0x0e, 7	; 14
 3b0:	fe cf       	rjmp	.-4      	; 0x3ae <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
 3b2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3b4:	77 9b       	sbis	0x0e, 7	; 14
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3b8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3bc:	98 60       	ori	r25, 0x08	; 8
 3be:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c6:	97 7f       	andi	r25, 0xF7	; 247
 3c8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3cc:	af cf       	rjmp	.-162    	; 0x32c <uint2lcd+0x32>

000003ce <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 3ce:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
 3d0:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3d8:	77 9b       	sbis	0x0e, 7	; 14
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 3dc:	9d e2       	ldi	r25, 0x2D	; 45
 3de:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3e0:	77 9b       	sbis	0x0e, 7	; 14
 3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3e4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3e8:	98 60       	ori	r25, 0x08	; 8
 3ea:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ee:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f2:	97 7f       	andi	r25, 0xF7	; 247
 3f4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f8:	95 ed       	ldi	r25, 0xD5	; 213
 3fa:	9a 95       	dec	r25
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <int2lcd+0x2c>
 3fe:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 400:	81 95       	neg	r24
 402:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <uint2lcd>

00000406 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 406:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 408:	77 9b       	sbis	0x0e, 7	; 14
 40a:	fe cf       	rjmp	.-4      	; 0x408 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 40c:	8e e0       	ldi	r24, 0x0E	; 14
 40e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 410:	77 9b       	sbis	0x0e, 7	; 14
 412:	fe cf       	rjmp	.-4      	; 0x410 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 414:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 41e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 422:	87 7f       	andi	r24, 0xF7	; 247
 424:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 428:	08 95       	ret

0000042a <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 42a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 42c:	77 9b       	sbis	0x0e, 7	; 14
 42e:	fe cf       	rjmp	.-4      	; 0x42c <cursor_off+0x2>
  SPDR = byte;                        //send payload
 430:	8c e0       	ldi	r24, 0x0C	; 12
 432:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 434:	77 9b       	sbis	0x0e, 7	; 14
 436:	fe cf       	rjmp	.-4      	; 0x434 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 438:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 43c:	88 60       	ori	r24, 0x08	; 8
 43e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 442:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 446:	87 7f       	andi	r24, 0xF7	; 247
 448:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 44c:	08 95       	ret

0000044e <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 44e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 450:	77 9b       	sbis	0x0e, 7	; 14
 452:	fe cf       	rjmp	.-4      	; 0x450 <shift_right+0x2>
  SPDR = byte;                        //send payload
 454:	8e e1       	ldi	r24, 0x1E	; 30
 456:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 458:	77 9b       	sbis	0x0e, 7	; 14
 45a:	fe cf       	rjmp	.-4      	; 0x458 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 45c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 460:	88 60       	ori	r24, 0x08	; 8
 462:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 466:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 46a:	87 7f       	andi	r24, 0xF7	; 247
 46c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 470:	08 95       	ret

00000472 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 472:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 474:	77 9b       	sbis	0x0e, 7	; 14
 476:	fe cf       	rjmp	.-4      	; 0x474 <shift_left+0x2>
  SPDR = byte;                        //send payload
 478:	88 e1       	ldi	r24, 0x18	; 24
 47a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 47c:	77 9b       	sbis	0x0e, 7	; 14
 47e:	fe cf       	rjmp	.-4      	; 0x47c <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 480:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 484:	88 60       	ori	r24, 0x08	; 8
 486:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 48a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 48e:	87 7f       	andi	r24, 0xF7	; 247
 490:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 494:	08 95       	ret

00000496 <strobe_lcd>:
 496:	e2 e6       	ldi	r30, 0x62	; 98
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	88 60       	ori	r24, 0x08	; 8
 49e:	80 83       	st	Z, r24
 4a0:	80 81       	ld	r24, Z
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	80 83       	st	Z, r24
 4a6:	08 95       	ret

000004a8 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4a8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4aa:	77 9b       	sbis	0x0e, 7	; 14
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <clear_display+0x2>
  SPDR = byte;                        //send payload
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4b2:	77 9b       	sbis	0x0e, 7	; 14
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ba:	88 60       	ori	r24, 0x08	; 8
 4bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c4:	87 7f       	andi	r24, 0xF7	; 247
 4c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ca:	8f e1       	ldi	r24, 0x1F	; 31
 4cc:	9c e1       	ldi	r25, 0x1C	; 28
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <clear_display+0x26>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <clear_display+0x2c>
 4d4:	00 00       	nop
 4d6:	08 95       	ret

000004d8 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4d8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4da:	77 9b       	sbis	0x0e, 7	; 14
 4dc:	fe cf       	rjmp	.-4      	; 0x4da <cursor_home+0x2>
  SPDR = byte;                        //send payload
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4e2:	77 9b       	sbis	0x0e, 7	; 14
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ea:	88 60       	ori	r24, 0x08	; 8
 4ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4f4:	87 7f       	andi	r24, 0xF7	; 247
 4f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4fa:	8f e6       	ldi	r24, 0x6F	; 111
 4fc:	97 e1       	ldi	r25, 0x17	; 23
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <cursor_home+0x26>
 502:	00 c0       	rjmp	.+0      	; 0x504 <cursor_home+0x2c>
 504:	00 00       	nop
 506:	08 95       	ret

00000508 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 508:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 50a:	77 9b       	sbis	0x0e, 7	; 14
 50c:	fe cf       	rjmp	.-4      	; 0x50a <line2_col1+0x2>
  SPDR = byte;                        //send payload
 50e:	80 ec       	ldi	r24, 0xC0	; 192
 510:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 512:	77 9b       	sbis	0x0e, 7	; 14
 514:	fe cf       	rjmp	.-4      	; 0x512 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 516:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 51a:	88 60       	ori	r24, 0x08	; 8
 51c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 520:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 524:	87 7f       	andi	r24, 0xF7	; 247
 526:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 52a:	08 95       	ret

0000052c <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 52c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 52e:	77 9b       	sbis	0x0e, 7	; 14
 530:	fe cf       	rjmp	.-4      	; 0x52e <line1_col1+0x2>
  SPDR = byte;                        //send payload
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 536:	77 9b       	sbis	0x0e, 7	; 14
 538:	fe cf       	rjmp	.-4      	; 0x536 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 53a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 53e:	88 60       	ori	r24, 0x08	; 8
 540:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 544:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 548:	87 7f       	andi	r24, 0xF7	; 247
 54a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 54e:	08 95       	ret

00000550 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
 550:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 552:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 554:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 556:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 558:	77 9b       	sbis	0x0e, 7	; 14
 55a:	fe cf       	rjmp	.-4      	; 0x558 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 55c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 55e:	77 9b       	sbis	0x0e, 7	; 14
 560:	fe cf       	rjmp	.-4      	; 0x55e <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 562:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 566:	88 60       	ori	r24, 0x08	; 8
 568:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 56c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 570:	87 7f       	andi	r24, 0xF7	; 247
 572:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 576:	85 ed       	ldi	r24, 0xD5	; 213
 578:	8a 95       	dec	r24
 57a:	f1 f7       	brne	.-4      	; 0x578 <fill_spaces+0x28>
 57c:	00 00       	nop
 57e:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 580:	51 f7       	brne	.-44     	; 0x556 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
 582:	08 95       	ret

00000584 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 588:	77 9b       	sbis	0x0e, 7	; 14
 58a:	fe cf       	rjmp	.-4      	; 0x588 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 58c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 58e:	77 9b       	sbis	0x0e, 7	; 14
 590:	fe cf       	rjmp	.-4      	; 0x58e <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 592:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 596:	88 60       	ori	r24, 0x08	; 8
 598:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 59c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a0:	87 7f       	andi	r24, 0xF7	; 247
 5a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a6:	08 95       	ret

000005a8 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
 5a8:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5b0:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 5b2:	df 01       	movw	r26, r30
 5b4:	a4 0f       	add	r26, r20
 5b6:	b5 1f       	adc	r27, r21
 5b8:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5ba:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <string2lcd+0x14>
  SPDR = byte;                        //send payload
 5c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5c2:	77 9b       	sbis	0x0e, 7	; 14
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5c6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ca:	98 60       	ori	r25, 0x08	; 8
 5cc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d4:	97 7f       	andi	r25, 0xF7	; 247
 5d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5da:	85 ed       	ldi	r24, 0xD5	; 213
 5dc:	8a 95       	dec	r24
 5de:	f1 f7       	brne	.-4      	; 0x5dc <string2lcd+0x34>
 5e0:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 5e2:	6f 5f       	subi	r22, 0xFF	; 255
 5e4:	46 2f       	mov	r20, r22
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	df 01       	movw	r26, r30
 5ea:	0d 90       	ld	r0, X+
 5ec:	00 20       	and	r0, r0
 5ee:	e9 f7       	brne	.-6      	; 0x5ea <string2lcd+0x42>
 5f0:	9d 01       	movw	r18, r26
 5f2:	2e 1b       	sub	r18, r30
 5f4:	3f 0b       	sbc	r19, r31
 5f6:	22 50       	subi	r18, 0x02	; 2
 5f8:	31 09       	sbc	r19, r1
 5fa:	24 17       	cp	r18, r20
 5fc:	35 07       	cpc	r19, r21
 5fe:	c8 f6       	brcc	.-78     	; 0x5b2 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
 600:	08 95       	ret

00000602 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	99 ef       	ldi	r25, 0xF9	; 249
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <lcd_init+0x4>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <lcd_init+0xa>
 60c:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 60e:	88 e0       	ldi	r24, 0x08	; 8
 610:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 614:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 616:	77 9b       	sbis	0x0e, 7	; 14
 618:	fe cf       	rjmp	.-4      	; 0x616 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 61a:	80 e3       	ldi	r24, 0x30	; 48
 61c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 61e:	77 9b       	sbis	0x0e, 7	; 14
 620:	fe cf       	rjmp	.-4      	; 0x61e <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 622:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 626:	88 60       	ori	r24, 0x08	; 8
 628:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 62c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 630:	87 7f       	andi	r24, 0xF7	; 247
 632:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 636:	8f e5       	ldi	r24, 0x5F	; 95
 638:	9d e6       	ldi	r25, 0x6D	; 109
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <lcd_init+0x38>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <lcd_init+0x3e>
 640:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 642:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 644:	77 9b       	sbis	0x0e, 7	; 14
 646:	fe cf       	rjmp	.-4      	; 0x644 <lcd_init+0x42>
  SPDR = byte;                        //send payload
 648:	80 e3       	ldi	r24, 0x30	; 48
 64a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 64c:	77 9b       	sbis	0x0e, 7	; 14
 64e:	fe cf       	rjmp	.-4      	; 0x64c <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 650:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 654:	88 60       	ori	r24, 0x08	; 8
 656:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65e:	87 7f       	andi	r24, 0xF7	; 247
 660:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 664:	8f e5       	ldi	r24, 0x5F	; 95
 666:	9d e6       	ldi	r25, 0x6D	; 109
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <lcd_init+0x66>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <lcd_init+0x6c>
 66e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 670:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 672:	77 9b       	sbis	0x0e, 7	; 14
 674:	fe cf       	rjmp	.-4      	; 0x672 <lcd_init+0x70>
  SPDR = byte;                        //send payload
 676:	80 e3       	ldi	r24, 0x30	; 48
 678:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 67a:	77 9b       	sbis	0x0e, 7	; 14
 67c:	fe cf       	rjmp	.-4      	; 0x67a <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 67e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 682:	88 60       	ori	r24, 0x08	; 8
 684:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 688:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68c:	87 7f       	andi	r24, 0xF7	; 247
 68e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 692:	8f e5       	ldi	r24, 0x5F	; 95
 694:	9d e6       	ldi	r25, 0x6D	; 109
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <lcd_init+0x94>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <lcd_init+0x9a>
 69c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 69e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a0:	77 9b       	sbis	0x0e, 7	; 14
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 6a4:	88 e3       	ldi	r24, 0x38	; 56
 6a6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a8:	77 9b       	sbis	0x0e, 7	; 14
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b0:	88 60       	ori	r24, 0x08	; 8
 6b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ba:	87 7f       	andi	r24, 0xF7	; 247
 6bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c0:	8f e1       	ldi	r24, 0x1F	; 31
 6c2:	9e e4       	ldi	r25, 0x4E	; 78
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <lcd_init+0xc2>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <lcd_init+0xc8>
 6ca:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6ce:	77 9b       	sbis	0x0e, 7	; 14
 6d0:	fe cf       	rjmp	.-4      	; 0x6ce <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 6d2:	88 e0       	ldi	r24, 0x08	; 8
 6d4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d6:	77 9b       	sbis	0x0e, 7	; 14
 6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6de:	88 60       	ori	r24, 0x08	; 8
 6e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e8:	87 7f       	andi	r24, 0xF7	; 247
 6ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ee:	8f e1       	ldi	r24, 0x1F	; 31
 6f0:	9e e4       	ldi	r25, 0x4E	; 78
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd_init+0xf0>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <lcd_init+0xf6>
 6f8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6fa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6fc:	77 9b       	sbis	0x0e, 7	; 14
 6fe:	fe cf       	rjmp	.-4      	; 0x6fc <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 704:	77 9b       	sbis	0x0e, 7	; 14
 706:	fe cf       	rjmp	.-4      	; 0x704 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 708:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 70c:	88 60       	ori	r24, 0x08	; 8
 70e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 712:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 716:	87 7f       	andi	r24, 0xF7	; 247
 718:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71c:	8f e1       	ldi	r24, 0x1F	; 31
 71e:	9e e4       	ldi	r25, 0x4E	; 78
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <lcd_init+0x11e>
 724:	00 c0       	rjmp	.+0      	; 0x726 <lcd_init+0x124>
 726:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 728:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 72a:	77 9b       	sbis	0x0e, 7	; 14
 72c:	fe cf       	rjmp	.-4      	; 0x72a <lcd_init+0x128>
  SPDR = byte;                        //send payload
 72e:	86 e0       	ldi	r24, 0x06	; 6
 730:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 732:	77 9b       	sbis	0x0e, 7	; 14
 734:	fe cf       	rjmp	.-4      	; 0x732 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 736:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 73a:	88 60       	ori	r24, 0x08	; 8
 73c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 740:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 744:	87 7f       	andi	r24, 0xF7	; 247
 746:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74a:	8f e1       	ldi	r24, 0x1F	; 31
 74c:	9e e4       	ldi	r25, 0x4E	; 78
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <lcd_init+0x14c>
 752:	00 c0       	rjmp	.+0      	; 0x754 <lcd_init+0x152>
 754:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 756:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 758:	77 9b       	sbis	0x0e, 7	; 14
 75a:	fe cf       	rjmp	.-4      	; 0x758 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 75c:	8c e0       	ldi	r24, 0x0C	; 12
 75e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 760:	77 9b       	sbis	0x0e, 7	; 14
 762:	fe cf       	rjmp	.-4      	; 0x760 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 764:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 768:	88 60       	ori	r24, 0x08	; 8
 76a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 76e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 772:	87 7f       	andi	r24, 0xF7	; 247
 774:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 778:	8f e1       	ldi	r24, 0x1F	; 31
 77a:	9e e4       	ldi	r25, 0x4E	; 78
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <lcd_init+0x17a>
 780:	00 c0       	rjmp	.+0      	; 0x782 <lcd_init+0x180>
 782:	00 00       	nop
 784:	08 95       	ret

00000786 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 786:	4f 92       	push	r4
 788:	5f 92       	push	r5
 78a:	6f 92       	push	r6
 78c:	7f 92       	push	r7
 78e:	8f 92       	push	r8
 790:	9f 92       	push	r9
 792:	af 92       	push	r10
 794:	bf 92       	push	r11
 796:	cf 92       	push	r12
 798:	df 92       	push	r13
 79a:	ef 92       	push	r14
 79c:	ff 92       	push	r15
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	69 97       	sbiw	r28, 0x19	; 25
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	14 2f       	mov	r17, r20
 7b8:	42 2e       	mov	r4, r18
 7ba:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
 7bc:	00 23       	and	r16, r16
 7be:	79 f0       	breq	.+30     	; 0x7de <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 7c0:	6b 01       	movw	r12, r22
 7c2:	7c 01       	movw	r14, r24
 7c4:	cc 24       	eor	r12, r12
 7c6:	f7 fc       	sbrc	r15, 7
 7c8:	c3 94       	inc	r12
 7ca:	dd 24       	eor	r13, r13
 7cc:	ee 24       	eor	r14, r14
 7ce:	ff 24       	eor	r15, r15
 7d0:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 7d2:	6b 01       	movw	r12, r22
 7d4:	7c 01       	movw	r14, r24
 7d6:	97 fd       	sbrc	r25, 7
 7d8:	a3 c0       	rjmp	.+326    	; 0x920 <lcd_int32+0x19a>
 7da:	c7 01       	movw	r24, r14
 7dc:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
 7de:	44 20       	and	r4, r4
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <lcd_int32+0x5e>
 7e2:	96 c0       	rjmp	.+300    	; 0x910 <lcd_int32+0x18a>
 7e4:	9e 01       	movw	r18, r28
 7e6:	2f 5f       	subi	r18, 0xFF	; 255
 7e8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ea:	59 01       	movw	r10, r18
 7ec:	49 01       	movw	r8, r18
 7ee:	66 24       	eor	r6, r6
 7f0:	6a 94       	dec	r6
 7f2:	64 0c       	add	r6, r4
 7f4:	71 2c       	mov	r7, r1
 7f6:	3f ef       	ldi	r19, 0xFF	; 255
 7f8:	63 1a       	sub	r6, r19
 7fa:	73 0a       	sbc	r7, r19
 7fc:	6a 0c       	add	r6, r10
 7fe:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodsi4>
 80c:	e6 2f       	mov	r30, r22
 80e:	2a 8b       	std	Y+18, r18	; 0x12
 810:	3b 8b       	std	Y+19, r19	; 0x13
 812:	4c 8b       	std	Y+20, r20	; 0x14
 814:	5d 8b       	std	Y+21, r21	; 0x15
 816:	6a 89       	ldd	r22, Y+18	; 0x12
 818:	7b 89       	ldd	r23, Y+19	; 0x13
 81a:	8c 89       	ldd	r24, Y+20	; 0x14
 81c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 81e:	20 e3       	ldi	r18, 0x30	; 48
 820:	2e 0f       	add	r18, r30
 822:	f4 01       	movw	r30, r8
 824:	21 93       	st	Z+, r18
 826:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
 828:	6e 16       	cp	r6, r30
 82a:	7f 06       	cpc	r7, r31
 82c:	49 f7       	brne	.-46     	; 0x800 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 82e:	99 24       	eor	r9, r9
 830:	93 94       	inc	r9
 832:	94 0c       	add	r9, r4
 834:	f5 01       	movw	r30, r10
 836:	e4 0d       	add	r30, r4
 838:	f1 1d       	adc	r31, r1
 83a:	2e e2       	ldi	r18, 0x2E	; 46
 83c:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
 83e:	2a e0       	ldi	r18, 0x0A	; 10
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodsi4>
 84a:	e6 2f       	mov	r30, r22
 84c:	2a 8b       	std	Y+18, r18	; 0x12
 84e:	3b 8b       	std	Y+19, r19	; 0x13
 850:	4c 8b       	std	Y+20, r20	; 0x14
 852:	5d 8b       	std	Y+21, r21	; 0x15
 854:	6e 8b       	std	Y+22, r22	; 0x16
 856:	7f 8b       	std	Y+23, r23	; 0x17
 858:	88 8f       	std	Y+24, r24	; 0x18
 85a:	99 8f       	std	Y+25, r25	; 0x19
 85c:	6a 89       	ldd	r22, Y+18	; 0x12
 85e:	7b 89       	ldd	r23, Y+19	; 0x13
 860:	8c 89       	ldd	r24, Y+20	; 0x14
 862:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 864:	31 e0       	ldi	r19, 0x01	; 1
 866:	39 0d       	add	r19, r9
 868:	d5 01       	movw	r26, r10
 86a:	a9 0d       	add	r26, r9
 86c:	b1 1d       	adc	r27, r1
 86e:	e0 5d       	subi	r30, 0xD0	; 208
 870:	ec 93       	st	X, r30
 872:	93 2e       	mov	r9, r19
        }while(qr.quot);
 874:	61 15       	cp	r22, r1
 876:	71 05       	cpc	r23, r1
 878:	81 05       	cpc	r24, r1
 87a:	91 05       	cpc	r25, r1
 87c:	01 f7       	brne	.-64     	; 0x83e <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 87e:	11 23       	and	r17, r17
 880:	61 f0       	breq	.+24     	; 0x89a <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 882:	51 10       	cpse	r5, r1
 884:	4b c0       	rjmp	.+150    	; 0x91c <lcd_int32+0x196>
 886:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 888:	31 17       	cp	r19, r17
 88a:	38 f4       	brcc	.+14     	; 0x89a <lcd_int32+0x114>
 88c:	f5 01       	movw	r30, r10
 88e:	e3 0f       	add	r30, r19
 890:	f1 1d       	adc	r31, r1
 892:	90 83       	st	Z, r25
 894:	3f 5f       	subi	r19, 0xFF	; 255
 896:	13 13       	cpse	r17, r19
 898:	f9 cf       	rjmp	.-14     	; 0x88c <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 89a:	00 23       	and	r16, r16
 89c:	31 f0       	breq	.+12     	; 0x8aa <lcd_int32+0x124>
 89e:	f5 01       	movw	r30, r10
 8a0:	e3 0f       	add	r30, r19
 8a2:	f1 1d       	adc	r31, r1
 8a4:	9d e2       	ldi	r25, 0x2D	; 45
 8a6:	90 83       	st	Z, r25
 8a8:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 8aa:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 8ac:	31 50       	subi	r19, 0x01	; 1
 8ae:	f5 01       	movw	r30, r10
 8b0:	e3 0f       	add	r30, r19
 8b2:	f1 1d       	adc	r31, r1
 8b4:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 8b6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8b8:	77 9b       	sbis	0x0e, 7	; 14
 8ba:	fe cf       	rjmp	.-4      	; 0x8b8 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 8bc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8be:	77 9b       	sbis	0x0e, 7	; 14
 8c0:	fe cf       	rjmp	.-4      	; 0x8be <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 8c2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8c6:	98 60       	ori	r25, 0x08	; 8
 8c8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8cc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8d0:	97 7f       	andi	r25, 0xF7	; 247
 8d2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8d6:	85 ed       	ldi	r24, 0xD5	; 213
 8d8:	8a 95       	dec	r24
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <lcd_int32+0x152>
 8dc:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 8de:	31 11       	cpse	r19, r1
 8e0:	e5 cf       	rjmp	.-54     	; 0x8ac <lcd_int32+0x126>

}
 8e2:	69 96       	adiw	r28, 0x19	; 25
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	de bf       	out	0x3e, r29	; 62
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	cd bf       	out	0x3d, r28	; 61
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	ff 90       	pop	r15
 8f8:	ef 90       	pop	r14
 8fa:	df 90       	pop	r13
 8fc:	cf 90       	pop	r12
 8fe:	bf 90       	pop	r11
 900:	af 90       	pop	r10
 902:	9f 90       	pop	r9
 904:	8f 90       	pop	r8
 906:	7f 90       	pop	r7
 908:	6f 90       	pop	r6
 90a:	5f 90       	pop	r5
 90c:	4f 90       	pop	r4
 90e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 910:	91 2c       	mov	r9, r1
 912:	9e 01       	movw	r18, r28
 914:	2f 5f       	subi	r18, 0xFF	; 255
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	59 01       	movw	r10, r18
 91a:	91 cf       	rjmp	.-222    	; 0x83e <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 91c:	90 e3       	ldi	r25, 0x30	; 48
 91e:	b4 cf       	rjmp	.-152    	; 0x888 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 920:	f0 94       	com	r15
 922:	e0 94       	com	r14
 924:	d0 94       	com	r13
 926:	c0 94       	com	r12
 928:	c1 1c       	adc	r12, r1
 92a:	d1 1c       	adc	r13, r1
 92c:	e1 1c       	adc	r14, r1
 92e:	f1 1c       	adc	r15, r1
 930:	54 cf       	rjmp	.-344    	; 0x7da <lcd_int32+0x54>

00000932 <lcd_int16>:
 932:	5f 92       	push	r5
 934:	6f 92       	push	r6
 936:	7f 92       	push	r7
 938:	8f 92       	push	r8
 93a:	9f 92       	push	r9
 93c:	af 92       	push	r10
 93e:	bf 92       	push	r11
 940:	cf 92       	push	r12
 942:	df 92       	push	r13
 944:	ef 92       	push	r14
 946:	ff 92       	push	r15
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	61 97       	sbiw	r28, 0x11	; 17
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	f8 94       	cli
 95a:	de bf       	out	0x3e, r29	; 62
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	cd bf       	out	0x3d, r28	; 61
 960:	5c 01       	movw	r10, r24
 962:	96 2e       	mov	r9, r22
 964:	54 2e       	mov	r5, r20
 966:	62 2e       	mov	r6, r18
 968:	8b 2c       	mov	r8, r11
 96a:	88 1c       	adc	r8, r8
 96c:	88 24       	eor	r8, r8
 96e:	88 1c       	adc	r8, r8
 970:	78 2c       	mov	r7, r8
 972:	9c 01       	movw	r18, r24
 974:	97 fd       	sbrc	r25, 7
 976:	9d c0       	rjmp	.+314    	; 0xab2 <lcd_int16+0x180>
 978:	55 20       	and	r5, r5
 97a:	09 f4       	brne	.+2      	; 0x97e <lcd_int16+0x4c>
 97c:	8e c0       	rjmp	.+284    	; 0xa9a <lcd_int16+0x168>
 97e:	8e 01       	movw	r16, r28
 980:	0f 5f       	subi	r16, 0xFF	; 255
 982:	1f 4f       	sbci	r17, 0xFF	; 255
 984:	78 01       	movw	r14, r16
 986:	cc 24       	eor	r12, r12
 988:	ca 94       	dec	r12
 98a:	c5 0c       	add	r12, r5
 98c:	d1 2c       	mov	r13, r1
 98e:	8f ef       	ldi	r24, 0xFF	; 255
 990:	c8 1a       	sub	r12, r24
 992:	d8 0a       	sbc	r13, r24
 994:	c0 0e       	add	r12, r16
 996:	d1 1e       	adc	r13, r17
 998:	6a e0       	ldi	r22, 0x0A	; 10
 99a:	70 e0       	ldi	r23, 0x00	; 0
 99c:	c9 01       	movw	r24, r18
 99e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
 9a2:	46 2f       	mov	r20, r22
 9a4:	24 2f       	mov	r18, r20
 9a6:	37 2f       	mov	r19, r23
 9a8:	80 5d       	subi	r24, 0xD0	; 208
 9aa:	f7 01       	movw	r30, r14
 9ac:	81 93       	st	Z+, r24
 9ae:	7f 01       	movw	r14, r30
 9b0:	ec 15       	cp	r30, r12
 9b2:	fd 05       	cpc	r31, r13
 9b4:	89 f7       	brne	.-30     	; 0x998 <lcd_int16+0x66>
 9b6:	ff 24       	eor	r15, r15
 9b8:	f3 94       	inc	r15
 9ba:	f5 0c       	add	r15, r5
 9bc:	f8 01       	movw	r30, r16
 9be:	e5 0d       	add	r30, r5
 9c0:	f1 1d       	adc	r31, r1
 9c2:	8e e2       	ldi	r24, 0x2E	; 46
 9c4:	80 83       	st	Z, r24
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <lcd_int16+0x98>
 9c8:	f9 2e       	mov	r15, r25
 9ca:	6a e0       	ldi	r22, 0x0A	; 10
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	c9 01       	movw	r24, r18
 9d0:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
 9d4:	46 2f       	mov	r20, r22
 9d6:	24 2f       	mov	r18, r20
 9d8:	37 2f       	mov	r19, r23
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	9f 0d       	add	r25, r15
 9de:	f8 01       	movw	r30, r16
 9e0:	ef 0d       	add	r30, r15
 9e2:	f1 1d       	adc	r31, r1
 9e4:	80 5d       	subi	r24, 0xD0	; 208
 9e6:	80 83       	st	Z, r24
 9e8:	21 15       	cp	r18, r1
 9ea:	31 05       	cpc	r19, r1
 9ec:	69 f7       	brne	.-38     	; 0x9c8 <lcd_int16+0x96>
 9ee:	61 10       	cpse	r6, r1
 9f0:	59 c0       	rjmp	.+178    	; 0xaa4 <lcd_int16+0x172>
 9f2:	b7 fc       	sbrc	r11, 7
 9f4:	63 c0       	rjmp	.+198    	; 0xabc <lcd_int16+0x18a>
 9f6:	99 20       	and	r9, r9
 9f8:	b1 f0       	breq	.+44     	; 0xa26 <lcd_int16+0xf4>
 9fa:	68 2d       	mov	r22, r8
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	29 2f       	mov	r18, r25
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	49 2d       	mov	r20, r9
 a06:	50 e0       	ldi	r21, 0x00	; 0
 a08:	46 1b       	sub	r20, r22
 a0a:	57 0b       	sbc	r21, r23
 a0c:	24 17       	cp	r18, r20
 a0e:	35 07       	cpc	r19, r21
 a10:	54 f4       	brge	.+20     	; 0xa26 <lcd_int16+0xf4>
 a12:	9f 5f       	subi	r25, 0xFF	; 255
 a14:	f8 01       	movw	r30, r16
 a16:	e2 0f       	add	r30, r18
 a18:	f3 1f       	adc	r31, r19
 a1a:	80 83       	st	Z, r24
 a1c:	29 2f       	mov	r18, r25
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	24 17       	cp	r18, r20
 a22:	35 07       	cpc	r19, r21
 a24:	b4 f3       	brlt	.-20     	; 0xa12 <lcd_int16+0xe0>
 a26:	77 20       	and	r7, r7
 a28:	31 f0       	breq	.+12     	; 0xa36 <lcd_int16+0x104>
 a2a:	f8 01       	movw	r30, r16
 a2c:	e9 0f       	add	r30, r25
 a2e:	f1 1d       	adc	r31, r1
 a30:	8d e2       	ldi	r24, 0x2D	; 45
 a32:	80 83       	st	Z, r24
 a34:	9f 5f       	subi	r25, 0xFF	; 255
 a36:	21 e0       	ldi	r18, 0x01	; 1
 a38:	91 50       	subi	r25, 0x01	; 1
 a3a:	f8 01       	movw	r30, r16
 a3c:	e9 0f       	add	r30, r25
 a3e:	f1 1d       	adc	r31, r1
 a40:	80 81       	ld	r24, Z
 a42:	2f b9       	out	0x0f, r18	; 15
 a44:	77 9b       	sbis	0x0e, 7	; 14
 a46:	fe cf       	rjmp	.-4      	; 0xa44 <lcd_int16+0x112>
 a48:	8f b9       	out	0x0f, r24	; 15
 a4a:	77 9b       	sbis	0x0e, 7	; 14
 a4c:	fe cf       	rjmp	.-4      	; 0xa4a <lcd_int16+0x118>
 a4e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a52:	88 60       	ori	r24, 0x08	; 8
 a54:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a58:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a5c:	87 7f       	andi	r24, 0xF7	; 247
 a5e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a62:	f5 ed       	ldi	r31, 0xD5	; 213
 a64:	fa 95       	dec	r31
 a66:	f1 f7       	brne	.-4      	; 0xa64 <lcd_int16+0x132>
 a68:	00 00       	nop
 a6a:	91 11       	cpse	r25, r1
 a6c:	e5 cf       	rjmp	.-54     	; 0xa38 <lcd_int16+0x106>
 a6e:	61 96       	adiw	r28, 0x11	; 17
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	1f 91       	pop	r17
 a80:	0f 91       	pop	r16
 a82:	ff 90       	pop	r15
 a84:	ef 90       	pop	r14
 a86:	df 90       	pop	r13
 a88:	cf 90       	pop	r12
 a8a:	bf 90       	pop	r11
 a8c:	af 90       	pop	r10
 a8e:	9f 90       	pop	r9
 a90:	8f 90       	pop	r8
 a92:	7f 90       	pop	r7
 a94:	6f 90       	pop	r6
 a96:	5f 90       	pop	r5
 a98:	08 95       	ret
 a9a:	f1 2c       	mov	r15, r1
 a9c:	8e 01       	movw	r16, r28
 a9e:	0f 5f       	subi	r16, 0xFF	; 255
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	93 cf       	rjmp	.-218    	; 0x9ca <lcd_int16+0x98>
 aa4:	99 20       	and	r9, r9
 aa6:	09 f4       	brne	.+2      	; 0xaaa <lcd_int16+0x178>
 aa8:	be cf       	rjmp	.-132    	; 0xa26 <lcd_int16+0xf4>
 aaa:	68 2d       	mov	r22, r8
 aac:	70 e0       	ldi	r23, 0x00	; 0
 aae:	80 e3       	ldi	r24, 0x30	; 48
 ab0:	a7 cf       	rjmp	.-178    	; 0xa00 <lcd_int16+0xce>
 ab2:	22 27       	eor	r18, r18
 ab4:	33 27       	eor	r19, r19
 ab6:	28 1b       	sub	r18, r24
 ab8:	39 0b       	sbc	r19, r25
 aba:	5e cf       	rjmp	.-324    	; 0x978 <lcd_int16+0x46>
 abc:	f3 94       	inc	r15
 abe:	f3 94       	inc	r15
 ac0:	f8 01       	movw	r30, r16
 ac2:	e9 0f       	add	r30, r25
 ac4:	f1 1d       	adc	r31, r1
 ac6:	8d e2       	ldi	r24, 0x2D	; 45
 ac8:	80 83       	st	Z, r24
 aca:	99 20       	and	r9, r9
 acc:	59 f0       	breq	.+22     	; 0xae4 <lcd_int16+0x1b2>
 ace:	2f 2d       	mov	r18, r15
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	49 2d       	mov	r20, r9
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	24 17       	cp	r18, r20
 ad8:	35 07       	cpc	r19, r21
 ada:	24 f4       	brge	.+8      	; 0xae4 <lcd_int16+0x1b2>
 adc:	9f 2d       	mov	r25, r15
 ade:	71 2c       	mov	r7, r1
 ae0:	80 e2       	ldi	r24, 0x20	; 32
 ae2:	97 cf       	rjmp	.-210    	; 0xa12 <lcd_int16+0xe0>
 ae4:	9f 2d       	mov	r25, r15
 ae6:	a7 cf       	rjmp	.-178    	; 0xa36 <lcd_int16+0x104>

00000ae8 <main>:
//******************************************************************************
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does no further device specific inits
//******************************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 ae8:	87 b3       	in	r24, 0x17	; 23
 aea:	87 60       	ori	r24, 0x07	; 7
 aec:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, no interrupts 
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
 aee:	80 e5       	ldi	r24, 0x50	; 80
 af0:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x FCPU 
 af2:	c1 e0       	ldi	r28, 0x01	; 1
 af4:	ce b9       	out	0x0e, r28	; 14
//******************************************************************************
// main() body
//******************************************************************************
int main(void){
  spi_init();      //initalize SPI 
  lcd_init();      //initalize LCD 
 af6:	0e 94 01 03 	call	0x602	; 0x602 <lcd_init>
  clear_display(); //manually clear LCD display 
 afa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <clear_display>
  cursor_off();    //keep LCD cursor off
 afe:	0e 94 15 02 	call	0x42a	; 0x42a <cursor_off>
 
  //Setup timer/counter TCNT0 to run in CTC mode
  TIMSK |= (1<<OCIE0);  //enable TCNT0 compare interrupt
 b02:	87 b7       	in	r24, 0x37	; 55
 b04:	82 60       	ori	r24, 0x02	; 2
 b06:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<WGM01);  //CTC mode, no prescaling
 b08:	83 b7       	in	r24, 0x33	; 51
 b0a:	88 60       	ori	r24, 0x08	; 8
 b0c:	83 bf       	out	0x33, r24	; 51

//try some of these values with and without debouncing
//interrupt period = 62.5ns * (OCR0+1) * prescale
//  OCR0=0xFF; TCCR0 |= (1<<CS02)|(1<<CS01)|(1<<CS00); //switch sample period=32.7ms
//  OCR0=0x3F; TCCR0 |= (1<<CS02)|(1<<CS00);           //switch sample period=1ms 
    OCR0=0x01; TCCR0 |= (1<<CS00);                     //switch sample period=125ns
 b0e:	c1 bf       	out	0x31, r28	; 49
 b10:	83 b7       	in	r24, 0x33	; 51
 b12:	81 60       	ori	r24, 0x01	; 1
 b14:	83 bf       	out	0x33, r24	; 51

  sei();                             //enable global interrupts
 b16:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b18:	8f e3       	ldi	r24, 0x3F	; 63
 b1a:	9c e9       	ldi	r25, 0x9C	; 156
 b1c:	01 97       	sbiw	r24, 0x01	; 1
 b1e:	f1 f7       	brne	.-4      	; 0xb1c <main+0x34>
 b20:	00 c0       	rjmp	.+0      	; 0xb22 <main+0x3a>
 b22:	00 00       	nop
  while(1){                          //main while loop 
    _delay_ms(10);                   //10mS wait to prevent display flicker 
    itoa(switch_count, lcd_str, 10); //convert integer to ascii code
 b24:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b28:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 b2c:	4a e0       	ldi	r20, 0x0A	; 10
 b2e:	6d e0       	ldi	r22, 0x0D	; 13
 b30:	71 e0       	ldi	r23, 0x01	; 1
 b32:	0e 94 24 06 	call	0xc48	; 0xc48 <__itoa_ncheck>
    string2lcd(lcd_str);             //send string to LCD
 b36:	8d e0       	ldi	r24, 0x0D	; 13
 b38:	91 e0       	ldi	r25, 0x01	; 1
 b3a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <string2lcd>
    cursor_home();
 b3e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <cursor_home>
 b42:	ea cf       	rjmp	.-44     	; 0xb18 <main+0x30>

00000b44 <__divmodhi4>:
 b44:	97 fb       	bst	r25, 7
 b46:	07 2e       	mov	r0, r23
 b48:	16 f4       	brtc	.+4      	; 0xb4e <__divmodhi4+0xa>
 b4a:	00 94       	com	r0
 b4c:	07 d0       	rcall	.+14     	; 0xb5c <__divmodhi4_neg1>
 b4e:	77 fd       	sbrc	r23, 7
 b50:	09 d0       	rcall	.+18     	; 0xb64 <__divmodhi4_neg2>
 b52:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__udivmodhi4>
 b56:	07 fc       	sbrc	r0, 7
 b58:	05 d0       	rcall	.+10     	; 0xb64 <__divmodhi4_neg2>
 b5a:	3e f4       	brtc	.+14     	; 0xb6a <__divmodhi4_exit>

00000b5c <__divmodhi4_neg1>:
 b5c:	90 95       	com	r25
 b5e:	81 95       	neg	r24
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	08 95       	ret

00000b64 <__divmodhi4_neg2>:
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255

00000b6a <__divmodhi4_exit>:
 b6a:	08 95       	ret

00000b6c <__divmodsi4>:
 b6c:	05 2e       	mov	r0, r21
 b6e:	97 fb       	bst	r25, 7
 b70:	1e f4       	brtc	.+6      	; 0xb78 <__divmodsi4+0xc>
 b72:	00 94       	com	r0
 b74:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__negsi2>
 b78:	57 fd       	sbrc	r21, 7
 b7a:	07 d0       	rcall	.+14     	; 0xb8a <__divmodsi4_neg2>
 b7c:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodsi4>
 b80:	07 fc       	sbrc	r0, 7
 b82:	03 d0       	rcall	.+6      	; 0xb8a <__divmodsi4_neg2>
 b84:	4e f4       	brtc	.+18     	; 0xb98 <__divmodsi4_exit>
 b86:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__negsi2>

00000b8a <__divmodsi4_neg2>:
 b8a:	50 95       	com	r21
 b8c:	40 95       	com	r20
 b8e:	30 95       	com	r19
 b90:	21 95       	neg	r18
 b92:	3f 4f       	sbci	r19, 0xFF	; 255
 b94:	4f 4f       	sbci	r20, 0xFF	; 255
 b96:	5f 4f       	sbci	r21, 0xFF	; 255

00000b98 <__divmodsi4_exit>:
 b98:	08 95       	ret

00000b9a <__negsi2>:
 b9a:	90 95       	com	r25
 b9c:	80 95       	com	r24
 b9e:	70 95       	com	r23
 ba0:	61 95       	neg	r22
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255
 ba4:	8f 4f       	sbci	r24, 0xFF	; 255
 ba6:	9f 4f       	sbci	r25, 0xFF	; 255
 ba8:	08 95       	ret

00000baa <__ashldi3>:
 baa:	0f 93       	push	r16
 bac:	08 30       	cpi	r16, 0x08	; 8
 bae:	90 f0       	brcs	.+36     	; 0xbd4 <__ashldi3+0x2a>
 bb0:	98 2f       	mov	r25, r24
 bb2:	87 2f       	mov	r24, r23
 bb4:	76 2f       	mov	r23, r22
 bb6:	65 2f       	mov	r22, r21
 bb8:	54 2f       	mov	r21, r20
 bba:	43 2f       	mov	r20, r19
 bbc:	32 2f       	mov	r19, r18
 bbe:	22 27       	eor	r18, r18
 bc0:	08 50       	subi	r16, 0x08	; 8
 bc2:	f4 cf       	rjmp	.-24     	; 0xbac <__ashldi3+0x2>
 bc4:	22 0f       	add	r18, r18
 bc6:	33 1f       	adc	r19, r19
 bc8:	44 1f       	adc	r20, r20
 bca:	55 1f       	adc	r21, r21
 bcc:	66 1f       	adc	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	0a 95       	dec	r16
 bd6:	b2 f7       	brpl	.-20     	; 0xbc4 <__ashldi3+0x1a>
 bd8:	0f 91       	pop	r16
 bda:	08 95       	ret

00000bdc <__udivmodhi4>:
 bdc:	aa 1b       	sub	r26, r26
 bde:	bb 1b       	sub	r27, r27
 be0:	51 e1       	ldi	r21, 0x11	; 17
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <__udivmodhi4_ep>

00000be4 <__udivmodhi4_loop>:
 be4:	aa 1f       	adc	r26, r26
 be6:	bb 1f       	adc	r27, r27
 be8:	a6 17       	cp	r26, r22
 bea:	b7 07       	cpc	r27, r23
 bec:	10 f0       	brcs	.+4      	; 0xbf2 <__udivmodhi4_ep>
 bee:	a6 1b       	sub	r26, r22
 bf0:	b7 0b       	sbc	r27, r23

00000bf2 <__udivmodhi4_ep>:
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	5a 95       	dec	r21
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__udivmodhi4_loop>
 bfa:	80 95       	com	r24
 bfc:	90 95       	com	r25
 bfe:	bc 01       	movw	r22, r24
 c00:	cd 01       	movw	r24, r26
 c02:	08 95       	ret

00000c04 <__udivmodsi4>:
 c04:	a1 e2       	ldi	r26, 0x21	; 33
 c06:	1a 2e       	mov	r1, r26
 c08:	aa 1b       	sub	r26, r26
 c0a:	bb 1b       	sub	r27, r27
 c0c:	fd 01       	movw	r30, r26
 c0e:	0d c0       	rjmp	.+26     	; 0xc2a <__udivmodsi4_ep>

00000c10 <__udivmodsi4_loop>:
 c10:	aa 1f       	adc	r26, r26
 c12:	bb 1f       	adc	r27, r27
 c14:	ee 1f       	adc	r30, r30
 c16:	ff 1f       	adc	r31, r31
 c18:	a2 17       	cp	r26, r18
 c1a:	b3 07       	cpc	r27, r19
 c1c:	e4 07       	cpc	r30, r20
 c1e:	f5 07       	cpc	r31, r21
 c20:	20 f0       	brcs	.+8      	; 0xc2a <__udivmodsi4_ep>
 c22:	a2 1b       	sub	r26, r18
 c24:	b3 0b       	sbc	r27, r19
 c26:	e4 0b       	sbc	r30, r20
 c28:	f5 0b       	sbc	r31, r21

00000c2a <__udivmodsi4_ep>:
 c2a:	66 1f       	adc	r22, r22
 c2c:	77 1f       	adc	r23, r23
 c2e:	88 1f       	adc	r24, r24
 c30:	99 1f       	adc	r25, r25
 c32:	1a 94       	dec	r1
 c34:	69 f7       	brne	.-38     	; 0xc10 <__udivmodsi4_loop>
 c36:	60 95       	com	r22
 c38:	70 95       	com	r23
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	9b 01       	movw	r18, r22
 c40:	ac 01       	movw	r20, r24
 c42:	bd 01       	movw	r22, r26
 c44:	cf 01       	movw	r24, r30
 c46:	08 95       	ret

00000c48 <__itoa_ncheck>:
 c48:	bb 27       	eor	r27, r27
 c4a:	4a 30       	cpi	r20, 0x0A	; 10
 c4c:	31 f4       	brne	.+12     	; 0xc5a <__itoa_ncheck+0x12>
 c4e:	99 23       	and	r25, r25
 c50:	22 f4       	brpl	.+8      	; 0xc5a <__itoa_ncheck+0x12>
 c52:	bd e2       	ldi	r27, 0x2D	; 45
 c54:	90 95       	com	r25
 c56:	81 95       	neg	r24
 c58:	9f 4f       	sbci	r25, 0xFF	; 255
 c5a:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__utoa_common>

00000c5e <__utoa_ncheck>:
 c5e:	bb 27       	eor	r27, r27

00000c60 <__utoa_common>:
 c60:	fb 01       	movw	r30, r22
 c62:	55 27       	eor	r21, r21
 c64:	aa 27       	eor	r26, r26
 c66:	88 0f       	add	r24, r24
 c68:	99 1f       	adc	r25, r25
 c6a:	aa 1f       	adc	r26, r26
 c6c:	a4 17       	cp	r26, r20
 c6e:	10 f0       	brcs	.+4      	; 0xc74 <__utoa_common+0x14>
 c70:	a4 1b       	sub	r26, r20
 c72:	83 95       	inc	r24
 c74:	50 51       	subi	r21, 0x10	; 16
 c76:	b9 f7       	brne	.-18     	; 0xc66 <__utoa_common+0x6>
 c78:	a0 5d       	subi	r26, 0xD0	; 208
 c7a:	aa 33       	cpi	r26, 0x3A	; 58
 c7c:	08 f0       	brcs	.+2      	; 0xc80 <__utoa_common+0x20>
 c7e:	a9 5d       	subi	r26, 0xD9	; 217
 c80:	a1 93       	st	Z+, r26
 c82:	00 97       	sbiw	r24, 0x00	; 0
 c84:	79 f7       	brne	.-34     	; 0xc64 <__utoa_common+0x4>
 c86:	b1 11       	cpse	r27, r1
 c88:	b1 93       	st	Z+, r27
 c8a:	11 92       	st	Z+, r1
 c8c:	cb 01       	movw	r24, r22
 c8e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <strrev>

00000c92 <strrev>:
 c92:	dc 01       	movw	r26, r24
 c94:	fc 01       	movw	r30, r24
 c96:	67 2f       	mov	r22, r23
 c98:	71 91       	ld	r23, Z+
 c9a:	77 23       	and	r23, r23
 c9c:	e1 f7       	brne	.-8      	; 0xc96 <strrev+0x4>
 c9e:	32 97       	sbiw	r30, 0x02	; 2
 ca0:	04 c0       	rjmp	.+8      	; 0xcaa <strrev+0x18>
 ca2:	7c 91       	ld	r23, X
 ca4:	6d 93       	st	X+, r22
 ca6:	70 83       	st	Z, r23
 ca8:	62 91       	ld	r22, -Z
 caa:	ae 17       	cp	r26, r30
 cac:	bf 07       	cpc	r27, r31
 cae:	c8 f3       	brcs	.-14     	; 0xca2 <strrev+0x10>
 cb0:	08 95       	ret

00000cb2 <_exit>:
 cb2:	f8 94       	cli

00000cb4 <__stop_program>:
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <__stop_program>
